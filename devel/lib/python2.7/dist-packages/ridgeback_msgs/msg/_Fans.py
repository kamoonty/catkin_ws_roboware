# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ridgeback_msgs/Fans.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Fans(genpy.Message):
  _md5sum = "d529aec610975f8df12d912730064bbf"
  _type = "ridgeback_msgs/Fans"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Location of fans.
uint8 EQUIPMENT_BAY_INTAKE=0
uint8 EQUIPMENT_BAY_EXHAUST=1
uint8 CHARGER_BAY_INTAKE=2
uint8 CHARGER_BAY_EXHAUST=3
uint8 USER_BAY_INTAKE=4
uint8 USER_BAY_EXHAUST=5

uint8 FAN_OFF=0
uint8 FAN_ON_HIGH=1
uint8 FAN_ON_LOW=2
uint8[6] fans
"""
  # Pseudo-constants
  EQUIPMENT_BAY_INTAKE = 0
  EQUIPMENT_BAY_EXHAUST = 1
  CHARGER_BAY_INTAKE = 2
  CHARGER_BAY_EXHAUST = 3
  USER_BAY_INTAKE = 4
  USER_BAY_EXHAUST = 5
  FAN_OFF = 0
  FAN_ON_HIGH = 1
  FAN_ON_LOW = 2

  __slots__ = ['fans']
  _slot_types = ['uint8[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fans

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Fans, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.fans is None:
        self.fans = b'\0'*6
    else:
      self.fans = b'\0'*6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.fans
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_6B().pack(*_x))
      else:
        buff.write(_get_struct_6s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 6
      self.fans = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.fans
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_6B().pack(*_x))
      else:
        buff.write(_get_struct_6s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 6
      self.fans = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
_struct_6s = None
def _get_struct_6s():
    global _struct_6s
    if _struct_6s is None:
        _struct_6s = struct.Struct("<6s")
    return _struct_6s
